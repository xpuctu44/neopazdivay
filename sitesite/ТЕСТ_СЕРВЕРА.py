#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ Time Tracker
"""

import os
import sys
import subprocess
import time
import requests
from pathlib import Path

def test_python():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä—è–µ–º Python...")
    try:
        result = subprocess.run([sys.executable, "--version"], capture_output=True, text=True)
        print(f"‚úÖ Python: {result.stdout.strip()}")
        return True
    except Exception as e:
        print(f"‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return False

def test_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    required_packages = [
        "fastapi",
        "uvicorn", 
        "jinja2",
        "sqlalchemy",
        "pydantic",
        "passlib"
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing.append(package)
    
    if missing:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing)}")
        return False
    
    return True

def test_project_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        "neopazdivay/app/main.py",
        "neopazdivay/app/database.py",
        "neopazdivay/app/models.py",
        "neopazdivay/app/security.py",
        "neopazdivay/app/routers/__init__.py",
        "neopazdivay/app/routers/health.py",
        "neopazdivay/app/routers/auth.py",
        "neopazdivay/app/routers/attendance.py",
        "neopazdivay/app/static/css/styles.css",
        "neopazdivay/app/templates/base.html",
        "neopazdivay/requirements.txt"
    ]
    
    missing = []
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing.append(file_path)
    
    if missing:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {len(missing)}")
        return False
    
    return True

def test_server_startup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        os.chdir("neopazdivay")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        sys.path.insert(0, ".")
        from app.main import app
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
        if app:
            print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            return True
        else:
            print("‚ùå FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def test_port_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞"""
    print("\nüîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 8000...")
    
    try:
        response = requests.get("http://localhost:8000/health", timeout=2)
        if response.status_code == 200:
            print("‚úÖ –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç (—Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω)")
            return True
        else:
            print(f"‚ö†Ô∏è  –ü–æ—Ä—Ç 8000 –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return True
    except requests.exceptions.ConnectionError:
        print("‚úÖ –ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        return False

def main():
    print("=" * 60)
    print("    –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê TIME TRACKER")
    print("=" * 60)
    
    tests = [
        ("Python", test_python),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", test_project_structure),
        ("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", test_server_startup),
        ("–ü–æ—Ä—Ç", test_port_availability)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("    –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 60)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("–°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º.")
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
        print("–ó–ê–ü–£–°–ö_–°–ê–ô–¢–ê.bat")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    input()

if __name__ == "__main__":
    main()


