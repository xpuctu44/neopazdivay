import os
import asyncio
import secrets
import string
from datetime import datetime, timezone, timedelta, date
import re
from typing import Dict, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError

from app.database import get_db
from app.models import User, Attendance, Store, AllowedIP
from app.security import verify_password, hash_password


class TelegramBot:
    def __init__(self):
        self.application = None
        self.user_sessions: Dict[int, Dict] = {}  # telegram_id -> session data

    def _get_moscow_time(self) -> datetime:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (UTC+3)"""
        moscow_tz = timezone(timedelta(hours=3))
        return datetime.now(moscow_tz)

    def _get_db_session(self) -> Session:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return next(get_db())

    def _check_telegram_user_allowed(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞

        Returns:
            tuple: (is_allowed: bool, message: str)
        """
        db = self._get_db_session()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP
        allowed_ips = db.query(AllowedIP).filter(AllowedIP.is_active == True).all()

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP –≤–æ–æ–±—â–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
        if not allowed_ips:
            return True, "IP –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP)"

        # –î–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å,
        # –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        # (—ç—Ç–æ –∫–æ—Å–≤–µ–Ω–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π —Å–µ—Ç–∏)
        recent_attendance = db.query(Attendance).filter(
            Attendance.user_id == user_id,
            Attendance.started_at >= datetime.now() - timedelta(days=7)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        ).first()

        if recent_attendance:
            return True, "–†–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        # (—ç—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º)
        current_month = date.today().replace(day=1)
        next_month = (current_month + timedelta(days=32)).replace(day=1)

        from app.models import ScheduleEntry
        active_schedule = db.query(ScheduleEntry).filter(
            ScheduleEntry.user_id == user_id,
            ScheduleEntry.work_date >= current_month,
            ScheduleEntry.work_date < next_month,
            ScheduleEntry.published == True
        ).first()

        if active_schedule:
            return True, "–†–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP,
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        return True, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: IP –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ IP."

    def _generate_web_credentials(self, name: str) -> tuple[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏
        base_username = name.lower().replace(' ', '_').replace('-', '_')
        username = base_username

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
        db = self._get_db_session()
        counter = 1
        while db.query(User).filter(User.web_username == username).first():
            username = f"{base_username}_{counter}"
            counter += 1

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
        alphabet = string.ascii_letters + string.digits
        password = ''.join(secrets.choice(alphabet) for _ in range(8))

        return username, password

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        telegram_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db = self._get_db_session()
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if user:
            self.user_sessions[telegram_id] = {"user_id": user.id, "step": "main_menu"}
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {user.full_name or username}!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user.id)
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            # –ò—â–µ–º –ø–æ telegram_id –≤ —Å–µ—Å—Å–∏—è—Ö –∏–ª–∏ –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            self.user_sessions[telegram_id] = {
                "step": "register_full_name",
                "registration_data": {}
            }
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
                "üìù –®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"
            )

    async def register_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
        telegram_id = update.effective_user.id
        self.user_sessions[telegram_id] = {
            "step": "register_full_name",
            "registration_data": {}
        }
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "üìù –®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        telegram_id = update.effective_user.id
        text = update.message.text

        if telegram_id not in self.user_sessions:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            return

        session = self.user_sessions[telegram_id]
        step = session.get("step")

        if step.startswith("register_"):
            await self._handle_registration_step(update, text)
        elif step == "main_menu":
            await self._handle_main_menu(update, text)
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

    async def _handle_registration_step(self, update, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        telegram_id = update.effective_user.id
        session = self.user_sessions[telegram_id]
        step = session["step"]
        registration_data = session["registration_data"]

        if step == "register_full_name":
            # –®–∞–≥ 1: –ü–æ–ª–Ω–æ–µ –∏–º—è
            if len(text.strip()) < 2:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
                return

            registration_data["full_name"] = text.strip()
            session["step"] = "register_email"
            await update.message.reply_text(
                "üìß –®–∞–≥ 2 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å\n"
                "(–≠—Ç–æ—Ç email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ª–æ–≥–∏–Ω –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏):"
            )

        elif step == "register_email":
            # –®–∞–≥ 2: Email
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if not re.match(email_pattern, text.strip()):
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email
            db = self._get_db_session()
            existing_user = db.query(User).filter(User.email == text.strip()).first()
            if existing_user:
                await update.message.reply_text("–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email:")
                return

            registration_data["email"] = text.strip()
            session["step"] = "register_password"
            await update.message.reply_text(
                "üîí –®–∞–≥ 3 –∏–∑ 4: –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏\n"
                "(–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):"
            )

        elif step == "register_password":
            # –®–∞–≥ 3: –ü–∞—Ä–æ–ª—å
            if len(text.strip()) < 6:
                await update.message.reply_text("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
                return

            registration_data["password"] = text.strip()
            session["step"] = "register_date_of_birth"
            await update.message.reply_text(
                "üìÖ –®–∞–≥ 4 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                "(–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990):"
            )

        elif step == "register_date_of_birth":
            # –®–∞–≥ 4: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
            if not re.match(date_pattern, text.strip()):
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
                return

            try:
                day, month, year = map(int, text.strip().split('.'))
                date_of_birth = date(year, month, day)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
                today = date.today()
                if date_of_birth >= today:
                    await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                    return
                if year < 1900:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:")
                    return

                registration_data["date_of_birth"] = date_of_birth

                # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._create_user_from_registration(update, registration_data)

            except ValueError:
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
                return

    async def _create_user_from_registration(self, update, registration_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        telegram_id = update.effective_user.id

        db = self._get_db_session()

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            user = User(
                email=registration_data["email"],
                full_name=registration_data["full_name"],
                password_hash=hash_password(registration_data["password"]),
                date_of_birth=registration_data["date_of_birth"],
                role="employee",
                is_active=True,
                telegram_id=telegram_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –¥–ª—è —Å–≤—è–∑–∏
                web_username=registration_data["email"],  # Email –∫–∞–∫ –ª–æ–≥–∏–Ω –¥–ª—è –≤–µ–±
                web_password_plain=registration_data["password"]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
            )

            db.add(user)
            db.commit()
            db.refresh(user)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            self.user_sessions[telegram_id] = {"user_id": user.id, "step": "main_menu"}

            await update.message.reply_text(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {registration_data['full_name']}!\n\n"
                f"üîë –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏:\n"
                f"–õ–æ–≥–∏–Ω: {registration_data['email']}\n"
                f"–ü–∞—Ä–æ–ª—å: {registration_data['password']}\n\n"
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user.id)
            )

        except IntegrityError:
            db.rollback()
            await update.message.reply_text("–û—à–∏–±–∫–∞: —ç—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email.")
        except Exception as e:
            db.rollback()
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def _handle_main_menu(self, update, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        telegram_id = update.effective_user.id
        user_id = self.user_sessions[telegram_id]["user_id"]

        if text == "‚úÖ –ü—Ä–∏—Ö–æ–¥":
            await self._handle_checkin(update, user_id)
        elif text == "‚ùå –£—Ö–æ–¥":
            await self._handle_checkout(update, user_id)
        elif text == "üìä –°—Ç–∞—Ç—É—Å":
            await self._handle_status(update, user_id)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")

    async def _handle_checkin(self, update, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
        db = self._get_db_session()
        user = db.query(User).filter(User.id == user_id).first()

        if not user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞
        is_allowed, message = self._check_telegram_user_allowed(user_id)
        if not is_allowed:
            await update.message.reply_text(
                f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n{message}\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if "‚ö†Ô∏è" in message:
            await update.message.reply_text(
                f"{message}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è...\n"
            )

        now = self._get_moscow_time()
        today = now.date()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        existing = db.query(Attendance).filter(
            Attendance.user_id == user_id,
            Attendance.work_date == today
        ).first()

        if existing:
            if existing.ended_at is None:
                # –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                await update.message.reply_text(
                    f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
                    f"–ù–∞—á–∞–ª–æ: {existing.started_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–Ø —É—à–µ–ª' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã",
                    reply_markup=self._get_main_menu_keyboard(user_id)
                )
                return
            else:
                # –ï—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
                existing.started_at = now
                existing.ended_at = None
                # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hours, —á—Ç–æ–±—ã —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
                db.add(existing)
                db.commit()
                await update.message.reply_text(
                    f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n"
                    f"–í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')}\n\n"
                    "–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!",
                    reply_markup=self._get_main_menu_keyboard(user_id)
                )
                return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        record = Attendance(
            user_id=user_id,
            started_at=now,
            work_date=today
        )

        try:
            db.add(record)
            db.commit()
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n"
                f"–í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')}\n\n"
                "–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
        except Exception as e:
            db.rollback()
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞")

    async def _handle_checkout(self, update, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ö–æ–¥–∞ —Å —Ä–∞–±–æ—Ç—ã"""
        db = self._get_db_session()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É—Ö–æ–¥–∞
        is_allowed, message = self._check_telegram_user_allowed(user_id)
        if not is_allowed:
            await update.message.reply_text(
                f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n{message}\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if "‚ö†Ô∏è" in message:
            await update.message.reply_text(
                f"{message}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è...\n"
            )

        now = self._get_moscow_time()
        today = now.date()

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        active = db.query(Attendance).filter(
            Attendance.user_id == user_id,
            Attendance.work_date == today,
            Attendance.ended_at.is_(None)
        ).first()

        if not active:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–Ø –ø—Ä–∏—à–µ–ª' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
        active.ended_at = now

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã
        started_at = active.started_at
        if started_at.tzinfo is None:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è naive, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–Ω–æ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
            moscow_tz = timezone(timedelta(hours=3))
            started_at = started_at.replace(tzinfo=moscow_tz)

        elapsed_seconds = (now - started_at).total_seconds()
        current_hours = round(elapsed_seconds / 3600.0, 2)

        # –°—É–º–º–∏—Ä—É–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        if active.hours:
            active.hours += current_hours
        else:
            active.hours = current_hours

        try:
            db.add(active)
            db.commit()

            hours = int(active.hours)
            minutes = int((active.hours - hours) * 60)

            await update.message.reply_text(
                f"‚ùå –£—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n"
                f"–í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')}\n"
                f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {hours}—á {minutes}–º–∏–Ω\n\n"
                "–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
        except Exception as e:
            db.rollback()
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —É—Ö–æ–¥–∞")

    async def _handle_status(self, update, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        db = self._get_db_session()
        today = date.today()

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        active = db.query(Attendance).filter(
            Attendance.user_id == user_id,
            Attendance.work_date == today,
            Attendance.ended_at.is_(None)
        ).first()

        if active:
            now = self._get_moscow_time()
            started_at = active.started_at
            if started_at.tzinfo is None:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è naive, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–Ω–æ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
                moscow_tz = timezone(timedelta(hours=3))
                started_at = started_at.replace(tzinfo=moscow_tz)

            elapsed_seconds = (now - started_at).total_seconds()
            hours = int(elapsed_seconds / 3600)
            minutes = int((elapsed_seconds % 3600) / 60)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ –¥–µ–Ω—å
            total_hours = active.hours or 0
            total_h = int(total_hours)
            total_m = int((total_hours - total_h) * 60)

            await update.message.reply_text(
                f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
                f"üü¢ –ù–∞ —Ä–∞–±–æ—Ç–µ\n"
                f"–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {active.started_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç—Ç–æ–π —Å–º–µ–Ω–µ: {hours}—á {minutes}–º–∏–Ω\n"
                f"–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_h}—á {total_m}–º–∏–Ω",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            completed = db.query(Attendance).filter(
                Attendance.user_id == user_id,
                Attendance.work_date == today,
                Attendance.ended_at.isnot(None)
            ).first()

            if completed:
                total_hours = completed.hours or 0
                total_h = int(total_hours)
                total_m = int((total_hours - total_h) * 60)
                await update.message.reply_text(
                    f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
                    f"üî¥ –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ\n"
                    f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {total_h}—á {total_m}–º–∏–Ω\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø—Ä–∏—à–µ–ª' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã",
                    reply_markup=self._get_main_menu_keyboard(user_id)
                )
            else:
                await update.message.reply_text(
                    f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
                    f"üî¥ –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø—Ä–∏—à–µ–ª' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã",
                    reply_markup=self._get_main_menu_keyboard(user_id)
                )

    def _get_main_menu_keyboard(self, user_id=None):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            db = self._get_db_session()
            today = date.today()
            active = db.query(Attendance).filter(
                Attendance.user_id == user_id,
                Attendance.work_date == today,
                Attendance.ended_at.is_(None)
            ).first()

            if active:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ä–∞–±–æ—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—è —É—à–µ–ª" –∏ "—Å—Ç–∞—Ç—É—Å"
                keyboard = [
                    [InlineKeyboardButton("‚ùå –Ø —É—à–µ–ª", callback_data="checkout")],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
                    [InlineKeyboardButton("üîë –õ–æ–≥–∏–Ω/–ü–∞—Ä–æ–ª—å", callback_data="show_credentials")]
                ]
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—è –ø—Ä–∏—à–µ–ª" –∏ "—Å—Ç–∞—Ç—É—Å"
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –Ø –ø—Ä–∏—à–µ–ª", callback_data="checkin")],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
                    [InlineKeyboardButton("üîë –õ–æ–≥–∏–Ω/–ü–∞—Ä–æ–ª—å", callback_data="show_credentials")]
                ]
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—è –ø—Ä–∏—à–µ–ª" –∏ "—Å—Ç–∞—Ç—É—Å"
            keyboard = [
                [InlineKeyboardButton("‚úÖ –Ø –ø—Ä–∏—à–µ–ª", callback_data="checkin")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
                [InlineKeyboardButton("üîë –õ–æ–≥–∏–Ω/–ü–∞—Ä–æ–ª—å", callback_data="show_credentials")]
            ]

        return InlineKeyboardMarkup(keyboard)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        telegram_id = query.from_user.id
        if telegram_id not in self.user_sessions:
            await query.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        user_id = self.user_sessions[telegram_id]["user_id"]
        action = query.data

        if action == "checkin":
            await self._handle_checkin_via_callback(query, user_id)
        elif action == "checkout":
            await self._handle_checkout_via_callback(query, user_id)
        elif action == "status":
            await self._handle_status_via_callback(query, user_id)
        elif action == "show_credentials":
            await self._handle_show_credentials_via_callback(query, user_id)

    async def _handle_checkin_via_callback(self, query, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ callback"""
        db = self._get_db_session()
        user = db.query(User).filter(User.id == user_id).first()

        if not user:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞
        is_allowed, message = self._check_telegram_user_allowed(user_id)
        if not is_allowed:
            await query.edit_message_text(
                f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n{message}\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if "‚ö†Ô∏è" in message:
            await query.edit_message_text(
                f"{message}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è...\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        now = self._get_moscow_time()
        today = now.date()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        existing = db.query(Attendance).filter(
            Attendance.user_id == user_id,
            Attendance.work_date == today
        ).first()

        if existing:
            if existing.ended_at is None:
                # –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                await query.edit_message_text(
                    f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
                    f"–ù–∞—á–∞–ª–æ: {existing.started_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–Ø —É—à–µ–ª' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self._get_main_menu_keyboard(user_id)
                )
                return
            else:
                # –ï—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
                existing.started_at = now
                existing.ended_at = None
                # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hours, —á—Ç–æ–±—ã —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
                db.add(existing)
                db.commit()
                try:
                    await query.edit_message_text(
                        f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n"
                        f"–í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')}\n\n"
                        "–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=self._get_main_menu_keyboard(user_id)
                    )
                except Exception as e:
                    if "Message is not modified" in str(e):
                        await query.answer("–ü—Ä–∏—Ö–æ–¥ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")
                    else:
                        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞")
                return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        record = Attendance(
            user_id=user_id,
            started_at=now,
            work_date=today
        )

        try:
            db.add(record)
            db.commit()
            try:
                await query.edit_message_text(
                    f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n"
                    f"–í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')}\n\n"
                    "–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self._get_main_menu_keyboard(user_id)
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    await query.answer("–ü—Ä–∏—Ö–æ–¥ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")
                else:
                    await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞")
        except Exception as e:
            db.rollback()
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞")

    async def _handle_checkout_via_callback(self, query, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ callback"""
        db = self._get_db_session()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É—Ö–æ–¥–∞
        is_allowed, message = self._check_telegram_user_allowed(user_id)
        if not is_allowed:
            await query.edit_message_text(
                f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n{message}\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if "‚ö†Ô∏è" in message:
            await query.edit_message_text(
                f"{message}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è...\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        now = self._get_moscow_time()
        today = now.date()

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        active = db.query(Attendance).filter(
            Attendance.user_id == user_id,
            Attendance.work_date == today,
            Attendance.ended_at.is_(None)
        ).first()

        if not active:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–Ø –ø—Ä–∏—à–µ–ª' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
        active.ended_at = now

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã
        started_at = active.started_at
        if started_at.tzinfo is None:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è naive, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–Ω–æ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
            moscow_tz = timezone(timedelta(hours=3))
            started_at = started_at.replace(tzinfo=moscow_tz)

        elapsed_seconds = (now - started_at).total_seconds()
        current_hours = round(elapsed_seconds / 3600.0, 2)

        # –°—É–º–º–∏—Ä—É–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        if active.hours:
            active.hours += current_hours
        else:
            active.hours = current_hours

        try:
            db.add(active)
            db.commit()

            hours = int(active.hours)
            minutes = int((active.hours - hours) * 60)

            try:
                await query.edit_message_text(
                    f"‚ùå –£—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n"
                    f"–í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {hours}—á {minutes}–º–∏–Ω\n\n"
                    "–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self._get_main_menu_keyboard(user_id)
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    await query.answer("–£—Ö–æ–¥ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")
                else:
                    await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —É—Ö–æ–¥–∞")
        except Exception as e:
            db.rollback()
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —É—Ö–æ–¥–∞")

    async def _handle_status_via_callback(self, query, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ callback"""
        db = self._get_db_session()
        today = date.today()

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        active = db.query(Attendance).filter(
            Attendance.user_id == user_id,
            Attendance.work_date == today,
            Attendance.ended_at.is_(None)
        ).first()

        if active:
            now = self._get_moscow_time()
            started_at = active.started_at
            if started_at.tzinfo is None:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è naive, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–Ω–æ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
                moscow_tz = timezone(timedelta(hours=3))
                started_at = started_at.replace(tzinfo=moscow_tz)

            elapsed_seconds = (now - started_at).total_seconds()
            hours = int(elapsed_seconds / 3600)
            minutes = int((elapsed_seconds % 3600) / 60)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ –¥–µ–Ω—å
            total_hours = active.hours or 0
            total_h = int(total_hours)
            total_m = int((total_hours - total_h) * 60)

            try:
                await query.edit_message_text(
                    f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
                    f"üü¢ –ù–∞ —Ä–∞–±–æ—Ç–µ\n"
                    f"–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {active.started_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç—Ç–æ–π —Å–º–µ–Ω–µ: {hours}—á {minutes}–º–∏–Ω\n"
                    f"–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_h}—á {total_m}–º–∏–Ω\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self._get_main_menu_keyboard(user_id)
                )
            except Exception as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                if "Message is not modified" in str(e):
                    await query.answer("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                else:
                    await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            completed = db.query(Attendance).filter(
                Attendance.user_id == user_id,
                Attendance.work_date == today,
                Attendance.ended_at.isnot(None)
            ).first()

            if completed:
                total_hours = completed.hours or 0
                total_h = int(total_hours)
                total_m = int((total_hours - total_h) * 60)
                try:
                    await query.edit_message_text(
                        f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
                        f"üî¥ –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ\n"
                        f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {total_h}—á {total_m}–º–∏–Ω\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø—Ä–∏—à–µ–ª' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=self._get_main_menu_keyboard(user_id)
                    )
                except Exception as e:
                    if "Message is not modified" in str(e):
                        await query.answer("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    else:
                        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            else:
                try:
                    await query.edit_message_text(
                        f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
                        f"üî¥ –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø—Ä–∏—à–µ–ª' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=self._get_main_menu_keyboard(user_id)
                    )
                except Exception as e:
                    if "Message is not modified" in str(e):
                        await query.answer("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    else:
                        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

    async def _handle_show_credentials_via_callback(self, query, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ callback"""
        db = self._get_db_session()
        user = db.query(User).filter(User.id == user_id).first()

        if not user:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not user.web_username or not user.web_password_plain:
            await query.edit_message_text(
                "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
            return

        try:
            await query.edit_message_text(
                f"üîë –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏:\n\n"
                f"–õ–æ–≥–∏–Ω: {user.web_username}\n"
                f"–ü–∞—Ä–æ–ª—å: {user.web_password_plain}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_menu_keyboard(user_id)
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                await query.answer("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã")
            else:
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    def setup_bot(self, token: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("register", self.register_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.application:
            await self.application.run_polling()
        else:
            raise ValueError("Bot not set up. Call setup_bot() first")

    def run_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.application:
            self.application.run_polling()
        else:
            raise ValueError("Bot not set up. Call setup_bot() first")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBot()